import numpy as np
from skimage import io
from tkinter import Tk, filedialog, Label, Button, Scale, HORIZONTAL, messagebox, ttk, Frame
from PIL import Image, ImageTk
from openpyxl import Workbook
import os

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –∏ Excel ===

def save_matrix_to_excel(matrices, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–∏–º—è: –º–∞—Ç—Ä–∏—Ü–∞} –≤ Excel —Ñ–∞–π–ª"""
    wb = Workbook()
    for name, matrix in matrices.items():
        ws = wb.create_sheet(title=name[:31])  # Excel –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 31 —Å–∏–º–≤–æ–ª
        m, n = matrix.shape
        for i in range(m):
            row_values = matrix[i, :].tolist()
            ws.append(row_values)
    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
    if "Sheet" in wb.sheetnames:
        wb.remove(wb["Sheet"])
    wb.save(filename)


def compress_image_svd(img, k, save_dir, basename):
    """–ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ SVD + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –≤ Excel"""
    if img.ndim == 2:
        num_channels = 1
    else:
        num_channels = img.shape[2]

    new_img = []
    for i in range(3 if num_channels > 1 else 1):
        channel = img if num_channels == 1 else img[:, :, i]
        U, S, Vt = np.linalg.svd(channel, full_matrices=False)

        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ k –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        U_k = U[:, :k]
        S_k = np.diag(S[:k])
        Vt_k = Vt[:k, :]

        # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ Excel ===
        matrices = {
            f"U_full_ch{i+1}": U,
            f"S_full_ch{i+1}": np.diag(S),
            f"Vt_full_ch{i+1}": Vt,
            f"U_k={k}_ch{i+1}": U_k,
            f"S_k={k}_ch{i+1}": S_k,
            f"Vt_k={k}_ch{i+1}": Vt_k
        }

        excel_path = os.path.join(save_dir, f"{basename}_channel{i+1}_matrices.xlsx")
        save_matrix_to_excel(matrices, excel_path)

        # === –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª ===
        compressed_channel = U_k @ S_k @ Vt_k
        new_img.append(compressed_channel)

    img_compressed = np.stack(new_img, axis=2) if num_channels > 1 else new_img[0]
    img_compressed = np.clip(img_compressed, 0, 255).astype(np.uint8)
    return img_compressed


# === –ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

class SVDCompressorApp:
    def __init__(self, master):
        self.master = master
        master.title("SVD Image Compressor")
        master.geometry("700x600")

        # –í–∫–ª–∞–¥–∫–∏ (Notebook)
        self.tabs = ttk.Notebook(master)
        self.main_tab = Frame(self.tabs)
        self.help_tab = Frame(self.tabs)

        self.tabs.add(self.main_tab, text="–ì–ª–∞–≤–Ω–∞—è")
        self.tabs.add(self.help_tab, text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
        self.tabs.pack(expand=1, fill="both")

        # --- –ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ---
        self.label = Label(self.main_tab, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è", font=("Arial", 14))
        self.label.pack(pady=10)

        self.load_button = Button(self.main_tab, text="–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=self.load_image)
        self.load_button.pack(pady=5)

        self.k_scale = Scale(self.main_tab, from_=1, to=100, orient=HORIZONTAL, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (k)")
        self.k_scale.set(20)
        self.k_scale.pack(pady=10, fill='x', padx=40)

        self.compress_button = Button(self.main_tab, text="–°–∂–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.compress_and_save)
        self.compress_button.pack(pady=5)

        self.preview_label = Label(self.main_tab)
        self.preview_label.pack(pady=10)

        # --- –í–∫–ª–∞–¥–∫–∞ –ø–æ–º–æ—â–∏ ---
        help_text = (
            "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (JPG, PNG, BMP –∏ —Ç.–¥.)\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SVD (–ø–æ–ª–∑—É–Ω–æ–∫ k). –ß–µ–º –º–µ–Ω—å—à–µ k, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∂–∞—Ç–∏–µ.\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–°–∂–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.\n\n"
            "üìÇ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞—Å—Ç –ø–∞–ø–∫—É:\n"
            "   compressed_images_<–∏–º—è_—Ñ–∞–π–ª–∞>\n\n"
            "–í –Ω–µ–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
            " - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            " - —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (compressed_k=...jpg)\n"
            " - Excel-—Ñ–∞–π–ª—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ U, S, Vt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ RGB\n\n"
            "üí° –ß–µ–º –±–æ–ª—å—à–µ k ‚Äî —Ç–µ–º –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.\n"
            "üíæ –ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∏—Ö –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "\n–ê–≤—Ç–æ—Ä: –≠–¥—É–∞—Ä–¥ –ï—Ñ–∏–º–æ–≤ | –í–µ—Ä—Å–∏—è 1.0"
        )

        self.help_label = Label(self.help_tab, text=help_text, justify="left", font=("Arial", 11), wraplength=650)
        self.help_label.pack(padx=10, pady=10)

        # --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
        self.image = None
        self.img_path = None

    def load_image(self):
        self.img_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tif *.tiff")]
        )
        if self.img_path:
            self.image = io.imread(self.img_path)
            img_preview = Image.open(self.img_path)
            img_preview.thumbnail((300, 300))
            img_tk = ImageTk.PhotoImage(img_preview)
            self.preview_label.configure(image=img_tk)
            self.preview_label.image = img_tk
            self.label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(self.img_path)}")

    def compress_and_save(self):
        if self.image is None:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        k = self.k_scale.get()
        basename = os.path.splitext(os.path.basename(self.img_path))[0]

        # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_dir = f"compressed_images_{basename}"
        os.makedirs(output_dir, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_save_path = os.path.join(output_dir, f"{basename}_original.jpg")
        io.imsave(original_save_path, self.image)

        # –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–æ–≤
        compressed_img = compress_image_svd(self.image, k, output_dir, basename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        compressed_save_path = os.path.join(output_dir, f"{basename}_compressed_k={k}.jpg")
        io.imsave(compressed_save_path, compressed_img)

        messagebox.showinfo(
            "–ì–æ—Ç–æ–≤–æ",
            f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{original_save_path}\n"
            f"‚úÖ –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{compressed_save_path}\n"
            f"‚úÖ –ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel-—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:\n{output_dir}"
        )


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    root = Tk()
    app = SVDCompressorApp(root)
    root.mainloop()
