import numpy as np
from skimage import io
from tkinter import Tk, filedialog, Label, Button, Scale, HORIZONTAL, messagebox, ttk, Frame
from PIL import Image, ImageTk
from openpyxl import Workbook, load_workbook
import os

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –∏ Excel ===

def save_matrix_to_excel(matrices, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–∏–º—è: –º–∞—Ç—Ä–∏—Ü–∞} –≤ Excel —Ñ–∞–π–ª"""
    wb = Workbook()
    for name, matrix in matrices.items():
        ws = wb.create_sheet(title=name[:31])  # Excel –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 31 —Å–∏–º–≤–æ–ª
        m, n = matrix.shape
        for i in range(m):
            row_values = matrix[i, :].tolist()
            ws.append(row_values)
    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
    if "Sheet" in wb.sheetnames:
        wb.remove(wb["Sheet"])
    wb.save(filename)


def compress_image_svd(img, k, save_dir, basename):
    """–ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ SVD + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –≤ Excel"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á/–± –∏–ª–∏ RGB
    if img.ndim == 2:
        num_channels = 1
    elif img.ndim == 3 and img.shape[2] >= 3:
        if np.allclose(img[:, :, 0], img[:, :, 1]) and np.allclose(img[:, :, 1], img[:, :, 2]):
            img = img[:, :, 0]
            num_channels = 1
        else:
            num_channels = 3
    else:
        num_channels = 1

    new_img = []
    num_loops = 3 if num_channels > 1 else 1

    for i in range(num_loops):
        channel = img if num_channels == 1 else img[:, :, i]
        channel = channel.astype(float)

        U, S, Vt = np.linalg.svd(channel, full_matrices=False)
        U_k, S_k, Vt_k = U[:, :k], np.diag(S[:k]), Vt[:k, :]

        matrices = {
            f"U_full_ch{i+1}": U,
            f"S_full_ch{i+1}": np.diag(S),
            f"Vt_full_ch{i+1}": Vt,
            f"U_k={k}_ch{i+1}": U_k,
            f"S_k={k}_ch{i+1}": S_k,
            f"Vt_k={k}_ch{i+1}": Vt_k
        }

        excel_path = os.path.join(save_dir, f"{basename}_channel{i+1}_matrices.xlsx")
        save_matrix_to_excel(matrices, excel_path)

        compressed_channel = U_k @ S_k @ Vt_k
        new_img.append(compressed_channel)

    img_compressed = np.stack(new_img, axis=2) if num_channels > 1 else new_img[0]
    img_compressed = np.clip(img_compressed, 0, 255).astype(np.uint8)
    return img_compressed


def compress_excel_svd(filepath, k, save_dir, basename):
    """–ö–æ–º–ø—Ä–µ—Å—Å–∏—è Excel —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SVD"""
    wb = load_workbook(filepath, data_only=True)
    ws = wb.active

    # –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ numpy
    data = []
    for row in ws.iter_rows(values_only=True):
        row_values = []
        for v in row:
            try:
                row_values.append(float(v))
            except (TypeError, ValueError):
                row_values.append(0.0)
        data.append(row_values)

    matrix = np.array(data, dtype=float)

    # SVD
    U, S, Vt = np.linalg.svd(matrix, full_matrices=False)
    U_k, S_k, Vt_k = U[:, :k], np.diag(S[:k]), Vt[:k, :]

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    compressed_matrix = U_k @ S_k @ Vt_k

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    result_path = os.path.join(save_dir, f"{basename}_compressed_k={k}.xlsx")
    wb_out = Workbook()
    ws_out = wb_out.active
    for row in compressed_matrix:
        ws_out.append(list(row))
    wb_out.save(result_path)

    # –ú–∞—Ç—Ä–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    matrices = {
        "U_full": U,
        "S_full": np.diag(S),
        "Vt_full": Vt,
        f"U_k={k}": U_k,
        f"S_k={k}": S_k,
        f"Vt_k={k}": Vt_k
    }
    excel_path = os.path.join(save_dir, f"{basename}_SVD_matrices.xlsx")
    save_matrix_to_excel(matrices, excel_path)

    return result_path


# === –ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

class SVDCompressorApp:
    def __init__(self, master):
        self.master = master
        master.title("SVD Compressor (Images & Excel)")
        master.geometry("700x600")

        self.tabs = ttk.Notebook(master)
        self.main_tab = Frame(self.tabs)
        self.help_tab = Frame(self.tabs)

        self.tabs.add(self.main_tab, text="–ì–ª–∞–≤–Ω–∞—è")
        self.tabs.add(self.help_tab, text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
        self.tabs.pack(expand=1, fill="both")

        self.label = Label(self.main_tab, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ Excel)", font=("Arial", 14))
        self.label.pack(pady=10)

        self.load_button = Button(self.main_tab, text="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self.load_file)
        self.load_button.pack(pady=5)

        self.k_scale = Scale(
            self.main_tab, from_=1, to=100, orient=HORIZONTAL, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (k)"
        )
        self.k_scale.set(20)
        self.k_scale.pack(pady=10, fill='x', padx=40)

        self.compress_button = Button(self.main_tab, text="–°–∂–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.compress_and_save)
        self.compress_button.pack(pady=5)

        self.preview_label = Label(self.main_tab)
        self.preview_label.pack(pady=10)

        help_text = (
            "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (.jpg, .png) –∏–ª–∏ Excel (.xlsx).\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SVD (k).\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–°–∂–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.\n\n"
            "üìÇ –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø–∞–ø–∫–∞ —Å:\n"
            "   - –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º, —Å–∂–∞—Ç—ã–º —Ñ–∞–π–ª–æ–º –∏ Excel-–º–∞—Ç—Ä–∏—Ü–∞–º–∏.\n\n"
            "üìä –î–ª—è Excel —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è:\n"
            "   - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏ –º–∞—Ç—Ä–∏—Ü—ã U, S, Vt.\n\n"
            "üí° –ß–µ–º –º–µ–Ω—å—à–µ k, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∂–∞—Ç–∏–µ (–Ω–æ –Ω–∏–∂–µ —Ç–æ—á–Ω–æ—Å—Ç—å).\n"
            "\n–ê–≤—Ç–æ—Ä: –≠–¥—É–∞—Ä–¥ –ï—Ñ–∏–º–æ–≤ | –í–µ—Ä—Å–∏—è 1.1"
        )
        self.help_label = Label(self.help_tab, text=help_text, justify="left", font=("Arial", 11), wraplength=650)
        self.help_label.pack(padx=10, pady=10)

        self.image = None
        self.file_path = None
        self.is_excel = False

    def load_file(self):
        self.file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            filetypes=[
                ("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.jpg *.jpeg *.png *.bmp *.tif *.tiff *.xlsx *.xls"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tif *.tiff"),
                ("Excel", "*.xlsx *.xls")
            ]
        )
        if not self.file_path:
            return

        ext = os.path.splitext(self.file_path)[1].lower()
        self.is_excel = ext in [".xlsx", ".xls"]

        if self.is_excel:
            self.label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω Excel —Ñ–∞–π–ª: {os.path.basename(self.file_path)}")
            self.preview_label.config(image='', text="(–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        else:
            self.image = io.imread(self.file_path)
            img_preview = Image.open(self.file_path)
            img_preview.thumbnail((300, 300))
            img_tk = ImageTk.PhotoImage(img_preview)
            self.preview_label.configure(image=img_tk)
            self.preview_label.image = img_tk
            self.label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(self.file_path)}")

        if not self.is_excel:
            if self.image.ndim == 2:
                m, n = self.image.shape
            else:
                m, n, _ = self.image.shape
        else:
            wb = load_workbook(self.file_path, data_only=True)
            ws = wb.active
            m, n = ws.max_row, ws.max_column

        self.k_scale.config(to=min(m, n))
        self.k_scale.set(min(20, m, n))


    def compress_and_save(self):
        if not self.file_path:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        k = self.k_scale.get()
        basename = os.path.splitext(os.path.basename(self.file_path))[0]
        output_dir = f"compressed_{basename}"
        os.makedirs(output_dir, exist_ok=True)

        if self.is_excel:
            # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Excel ===
            original_excel_path = os.path.join(output_dir, f"{basename}_original.xlsx")
            try:
                import shutil
                shutil.copy2(self.file_path, original_excel_path)
            except Exception as e:
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Excel:\n{e}")

            # === –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
            compressed_path = compress_excel_svd(self.file_path, k, output_dir, basename)
            messagebox.showinfo(
                "–ì–æ—Ç–æ–≤–æ",
                f"üìä Excel –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{original_excel_path}\n"
                f"‚úÖ –°–∂–∞—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n{compressed_path}\n"
                f"‚úÖ –ú–∞—Ç—Ä–∏—Ü—ã U, S, Vt —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel-—Ñ–∞–π–ª–µ\n(–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)"
            )

        else:
            # === –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
            original_path = os.path.join(output_dir, f"{basename}_original.jpg")
            io.imsave(original_path, self.image)

            compressed_img = compress_image_svd(self.image, k, output_dir, basename)
            compressed_path = os.path.join(output_dir, f"{basename}_compressed_k={k}.jpg")
            io.imsave(compressed_path, compressed_img)

            messagebox.showinfo(
                "–ì–æ—Ç–æ–≤–æ",
                f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
                f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {original_path}\n"
                f"‚úÖ –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {compressed_path}\n"
                f"‚úÖ –ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel-—Ñ–∞–π–ª—ã (–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)"
            )



# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    root = Tk()
    app = SVDCompressorApp(root)
    root.mainloop()
